<?php

/**
 * @file
 * Functions to support theming.
 */

declare(strict_types = 1);

use Drupal\Core\Render\Element;

/**
 * Implements hook_preprocess_breadcrumb().
 */
function oe_theme_preprocess_breadcrumb(&$variables) {
  $variables['segments'] = array_map(function ($item) {
    return [
      'href' => $item['url'],
      'label' => $item['text'],
    ];
  }, $variables['breadcrumb']);
}

/**
 * Implements hook_preprocess_menu__main().
 */
function oe_theme_preprocess_menu__main(&$variables) {
  // Massage data to be compliant with ECL navigation menu data structure.
  $variables['links'] = array_map(function ($item) {
    return [
      'href' => $item['url'],
      'label' => $item['title'],
      'is_active' => $item['in_active_trail'],
    ];
  }, $variables['items']);

  foreach ($variables['items'] as $name => $link) {
    $variables['links'][$name]['children_links'] = array_map(function ($item) {
      return [
        'href' => $item['url'],
        'label' => $item['title'],
        'is_active' => $item['in_active_trail'],
      ];
    }, $variables['items'][$name]['below']);
  }
}

/**
 * Implements hook_theme_suggestions_HOOK_alter().
 */
function oe_theme_theme_suggestions_field_alter(&$suggestions, $variables) {
  // Do not output field labels and wrapping markup for paragraph fields.
  if (isset($variables['element']['#entity_type']) && $variables['element']['#entity_type'] === 'paragraph') {
    $suggestions[] = 'field__bare';
  }
}

/**
 * Implements hook_preprocess_paragraph().
 */
function oe_theme_preprocess_paragraph__oe_links_block(&$variables) {
  // Massage data to be compliant with ECL links block component data structure.
  foreach (Element::children($variables['content']['field_oe_links']) as $index) {
    $variables['links'][] = [
      'label' => $variables['content']['field_oe_links'][$index]['#title'],
      'href' => $variables['content']['field_oe_links'][$index]['#url'],
    ];
  }
}

/**
 * Implements hook_preprocess_paragraph__oe_accordion().
 */
function oe_theme_preprocess_paragraph__oe_accordion(&$variables) {
  // Massage data to be compliant with ECL accordions component data structure.
  $builder = \Drupal::entityTypeManager()->getViewBuilder('paragraph');
  $variables['panels'] = [];

  /** @var \Drupal\entity_reference_revisions\Plugin\Field\FieldType\EntityReferenceRevisionsItem $field_item */
  foreach ($variables['paragraph']->get('field_oe_paragraphs') as $field_item) {
    $paragraph = $field_item->entity;
    $variables['panels'][] = [
      'id' => $paragraph->id(),
      'heading' => [
        'title' => $builder->viewField($paragraph->get('field_oe_text')),
        'icon' => $paragraph->get('field_oe_icon')->value,
      ],
      'body' => $builder->viewField($paragraph->get('field_oe_text_long')),
    ];
  }
}

/**
 * Implements hook_preprocess_menu_local_tasks().
 */
function oe_theme_preprocess_menu_local_tasks(&$variables) {
  foreach ($variables['primary'] as $link) {
    /** @var Drupal\Core\Url $url */
    $url = $link['#link']['url'];
    if ($url->access($variables['user'])) {
      $variables['primary_links'][] = [
        'href' => $url,
        'label' => $link['#link']['title'],
        'is_active' => $link['#active'],
      ];
    }
  }

  foreach ($variables['secondary'] as $link) {
    /** @var Drupal\Core\Url $url */
    $url = $link['#link']['url'];
    if ($url->access($variables['user'])) {
      $variables['secondary_links'][] = [
        'href' => $url,
        'label' => $link['#link']['title'],
        'is_active' => $link['#active'],
      ];
    }
  }
}

/**
 * Implements hook_preprocess_input__radio().
 */
function oe_theme_preprocess_input__radio(&$variables) {
  _oe_theme_preprocess_input_label_wrapper($variables);
}

/**
 * Implements hook_preprocess_input__checkbox().
 */
function oe_theme_preprocess_input__checkbox(&$variables) {
  _oe_theme_preprocess_input_label_wrapper($variables);
}

/**
 * Helper function to additionally preprocess checkbox and radio elements.
 *
 * Moves the label element to the input template and creates some helper
 * variables to be used with the ECL templates.
 *
 * @param array $variables
 *   Set of available variables.
 */
function _oe_theme_preprocess_input_label_wrapper(array &$variables): void {
  $element = &$variables['element'];
  $variables['has_error'] = !empty($element['#errors']);
  if (isset($element['#title']) && $element['#title'] !== '') {
    $variables['title'] = ['#markup' => $element['#title']];
  }
}

/**
 * Implements hook_preprocess_form_element().
 *
 * Disables displaying of the label for checkbox and radio elements, as the
 * label is already rendered in the input template.
 */
function oe_theme_preprocess_form_element(&$variables) {
  if (in_array($variables['element']['#type'], ['checkbox', 'radio'])) {
    $variables['label_display'] = 'none';
  }
}

/**
 * Implements hook_preprocess_pager().
 *
 * @see template_preprocess_pager()
 *
 * Overwrites the default Drupal pager in order to adapt to the ECL style
 * guide pager component requirements.
 * Most of the bare-bones are copy-pasted from the Drupal implementation.
 */
function oe_theme_preprocess_pager(&$variables) {
  $element = $variables['pager']['#element'];
  $parameters = $variables['pager']['#parameters'];
  $route_name = $variables['pager']['#route_name'];
  $route_parameters = isset($variables['pager']['#route_parameters']) ? $variables['pager']['#route_parameters'] : [];
  global $pager_page_array, $pager_total;

  // Nothing to do if there is only one page.
  if ($pager_total[$element] <= 1) {
    return;
  }

  $quantity = 5;
  $pager_middle = ceil($quantity / 2);
  $pager_current = $pager_page_array[$element] + 1;
  $pager_first = $pager_current - $pager_middle + 1;
  $pager_last = $pager_current + $quantity - $pager_middle;
  $pager_max = $pager_total[$element];

  $i = $pager_first;
  // Compared to the core implementation, we don't re-center but we cut out the
  // extra elements from the start and end of the query.
  if ($pager_last > $pager_max) {
    $pager_last = $pager_max;
  }
  if ($i <= 0) {
    $i = 1;
  }

  // Create the "first" and "previous" links if we are not on the first page.
  if ($pager_page_array[$element] > 0) {
    $variables['items']['first'] = [];
    $options = [
      'query' => pager_query_add_page($parameters, $element, 0),
    ];
    $variables['items']['first']['href'] = \Drupal::url($route_name, $route_parameters, $options);
    $variables['items']['first']['text'] = '1';
    $variables['items']['first']['title'] = t('Go to page 1');

    $variables['items']['previous'] = [];
    $options = [
      'query' => pager_query_add_page($parameters, $element, $pager_page_array[$element] - 1),
    ];
    $variables['items']['previous']['href'] = \Drupal::url($route_name, $route_parameters, $options);
    $variables['items']['previous']['text'] = t('‹ Previous');
    $variables['items']['previous']['title'] = t('Go to previous page');
  }

  if ($i != $pager_max) {
    // Generate the actual pager piece.
    $variables['items']['pages'] = [];
    for (; $i <= $pager_last && $i <= $pager_max; $i++) {
      // Don't generate a link to the first page when the "first" link is
      // already available.
      if ($i == 1 && $pager_current > 1) {
        continue;
      }

      // Don't generate a link to the last page when the "last" link is
      // already available.
      if ($i == $pager_max && ($pager_current < $pager_max)) {
        continue;
      }

      $options = [
        'query' => pager_query_add_page($parameters, $element, $i - 1),
      ];
      $variables['items']['pages'][$i]['href'] = \Drupal::url($route_name, $route_parameters, $options);
      if ($i == $pager_current) {
        $variables['current'] = $i;
      }
      $variables['items']['pages'][$i]['text'] = (string) $i;
      $variables['items']['pages'][$i]['title'] = t('Go to page @number', ['@number' => $i]);
    }
  }

  // Create the "next" and "last" links if we are not on the last page.
  if ($pager_page_array[$element] < ($pager_max - 1)) {
    // Setting up variables for the next page link.
    $variables['items']['next'] = [];
    $options = [
      'query' => pager_query_add_page($parameters, $element, $pager_page_array[$element] + 1),
    ];
    $variables['items']['next']['href'] = \Drupal::url($route_name, $route_parameters, $options);
    $variables['items']['next']['text'] = t('Next ›');
    $variables['items']['next']['title'] = t('Go to next page');

    // Setting up the variables for the last page link.
    $variables['items']['last'] = [];
    $options = [
      'query' => pager_query_add_page($parameters, $element, $pager_max - 1),
    ];
    $variables['items']['last']['href'] = \Drupal::url($route_name, $route_parameters, $options);
    $variables['items']['last']['text'] = (string) $pager_total[$element];
    $variables['items']['last']['title'] = t('Go to page @number', ['@number' => $pager_total[$element]]);
  }

  // Set up additional variables.
  $variables['max_page'] = $pager_total[$element];
}

/**
 * Implements hook_preprocess_links().
 */
function oe_theme_preprocess_links__language_block(&$variables) {
  $current_language = \Drupal::languageManager()
    ->getCurrentLanguage()
    ->getId();

  // Get original languages and add portugues and maltese values.
  $original_languages = \Drupal::languageManager()
    ->getStandardLanguageList();
  $original_languages['pt'] = ['Portuguese', 'Português'];
  $original_languages['mt'] = ['Maltese', 'Malti'];

  $variables['languages'] = [];
  foreach ($variables['links'] as $language_code => $link) {
    /** @var \Drupal\Core\Url $url */
    $url = $link['link']["#url"];
    $href = $url
      ->setOptions($link['link']['#options'])
      ->setAbsolute(TRUE)
      ->toString();

    $variables['languages'][] = [
      "href" => $href,
      "hreflang" => $language_code,
      "label" => $original_languages[$language_code][1],
      "english_label" => $link['link']["#title"],
      "lang" => $language_code,
      "isActive" => $language_code === $current_language,
    ];
  }
}
