<?php

/**
 * @file
 * Module file used for theming the Organisation content type.
 */

declare(strict_types = 1);

use Drupal\Core\Cache\CacheableMetadata;
use Drupal\file\FileInterface;
use Drupal\image\Plugin\Field\FieldType\ImageItem;
use Drupal\media\MediaInterface;
use Drupal\media_avportal\Plugin\media\Source\MediaAvPortalPhotoSource;
use Drupal\media\Plugin\media\Source\Image;
use Drupal\oe_theme\ValueObject\ImageValueObject;
use Drupal\Core\Entity\ContentEntityInterface;
use Drupal\oe_content_entity_contact\Entity\ContactInterface;

/**
 * Prepares variables for in-page navigation.
 *
 * Default template: oe-theme-helper-in-page-navigation.html.twig.
 *
 * @param array $variables
 *   An array of variables.
 */
function oe_theme_content_organisation_preprocess_oe_theme_helper_in_page_navigation__node__oe_organisation(array &$variables): void {
  /** @var \Drupal\node\NodeInterface $node */
  $node = $variables['entity'];

  if ($node->get('oe_organisation_logo')->isEmpty()) {
    return;
  }

  /** @var \Drupal\media\Entity\Media $media */
  $media = $node->get('oe_organisation_logo')->entity;

  if (!$media instanceof MediaInterface) {
    // The media entity is not available anymore, bail out.
    return;
  }

  $source = $media->getSource();

  // If its an image media, render it and assign it to the image variable.
  if (!$source instanceof MediaAvPortalPhotoSource && !$source instanceof Image) {
   return;
  }

  $cacheability = CacheableMetadata::createFromRenderArray($variables);
  $cacheability->addCacheableDependency($media);
  $thumbnail = !$media->get('thumbnail')->isEmpty() ? $media->get('thumbnail')->first() : NULL;

  if (!$thumbnail instanceof ImageItem || !$thumbnail->entity instanceof FileInterface) {
    $cacheability->applyTo($variables);
    return;
  }

  $image = ImageValueObject::fromStyledImageItem($thumbnail, 'oe_theme_medium_no_crop');
  $variables['image'] = $image;

  $cacheability->addCacheableDependency($image);
  $cacheability->addCacheableDependency($thumbnail->entity);
  $cacheability->addCacheableDependency(\Drupal::entityTypeManager()->getStorage('media_type')->load($media->bundle()));
  $cacheability->applyTo($variables);
}

/**
 * Implements template_preprocess_field().
 */
function oe_theme_content_organisation_preprocess_field__node__oe_publication_contacts(array &$variables): void {
  if (empty($variables['items'])) {
    return;
  }

  // Display an organisation node as contact.
  // This only works if the "oe_content_organisation_reference" is enabled and
  // correctly configured, check its README.md for more information.
  // If any of the referenced contacts is an organisation we need to first check
  // if that organisation has any contact details and prevent it from rendering
  // if it does not.
  foreach ($variables['items'] as &$item) {
    /** @var \Drupal\Core\Entity\ContentEntityInterface $contact */
    $contact = $item['content']['#oe_contact'];
    $cacheable_metadata  = CacheableMetadata::createFromRenderArray($item['content']);
    // If the contact is not an organisation we don't care.
    if ($contact->bundle() !== 'oe_organisation_reference') {
      continue;
    }
    $organisation = $contact->oe_node_reference->entity;
    if (!$organisation instanceof ContentEntityInterface) {
      // If by some chance an organisation is not linked we do not render
      // the contact.
      $item['content']['#access'] = FALSE;
      continue;
    }
    $cacheable_metadata->addCacheableDependency($organisation);

    $organisation_contact = $organisation->oe_organisation_contact->entity;
    if (!$organisation_contact instanceof ContactInterface) {
      // Do not render the contact if the organisation does not have contact
      // details of its own.
      $item['content']['#access'] = FALSE;
      $cacheable_metadata->applyTo($item);
      continue;
    }
    $cacheable_metadata->addCacheableDependency($organisation_contact);
    $cacheable_metadata->applyTo($item);
  }
}
