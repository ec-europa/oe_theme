<?php

/**
 * @file
 * Module file used for theming the Publication content type.
 */

declare(strict_types = 1);

use Drupal\Core\Cache\CacheableMetadata;
use Drupal\Core\Entity\ContentEntityInterface;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Entity\Display\EntityViewDisplayInterface;

/**
 * Implements hook_theme().
 */
function oe_theme_content_publication_theme() {
  return [
    'oe_theme_content_publication_description' => [
      'variables' => [
        'body' => '',
        'image' => '',
      ],
    ],
  ];
}

/**
 * Implements hook_ENTITY_TYPE_view_alter().
 */
function oe_theme_content_publication_node_view_alter(array &$build, EntityInterface $entity, EntityViewDisplayInterface $display) {
  // Run only for "Publication" content type.
  if ($entity->bundle() !== 'oe_publication') {
    return;
  }

  // Override field labels.
  if ($build['#view_mode'] === 'full') {
    $label_overrides = [
      'oe_reference_codes' => t('Identification'),
    ];

    if ($entity->get('oe_departments')->count() > 1) {
      $label_overrides['oe_departments'] = t('Related departments');
    }

    if ($entity->get('oe_publication_countries')->count() > 1) {
      $label_overrides['oe_publication_countries'] = t('Countries');
    }

    foreach ($label_overrides as $name => $label_override) {
      if (!$entity->get($name)->isEmpty() && isset($build[$name]['#title'])) {
        $build[$name]['#title'] = $label_override;
      }
    }
  }
}

/**
 * Implements template_preprocess_field().
 *
 * If any of the referenced contacts is an organisation we need to first check
 * if that organisation has any contact details and prevent it from rendering
 * if it does not.
 */
function oe_theme_content_publication_preprocess_field__node__oe_publication_contacts(&$variables) {
  if (empty($variables['items'])) {
    return;
  }
  foreach ($variables['items'] as &$item) {
    /** @var \Drupal\Core\Entity\ContentEntityInterface $contact */
    $contact = $item['content']['#oe_contact'];
    $cacheable_metadata  = CacheableMetadata::createFromRenderArray($item['content']);
    // If the contact is not an organisation we don't care.
    if ($contact->bundle() !== 'oe_organisation_reference') {
      continue;
    }
    $organisation = $contact->oe_node_reference->entity;
    if (!$organisation instanceof ContentEntityInterface) {
      // If by some chance an organisation is not linked we do not render
      // the contact.
      $item['content']['#access'] = FALSE;
      continue;
    }
    $cacheable_metadata->addCacheableDependency($organisation);

    $organisation_contact = $organisation->oe_organisation_contact->entity;
    if (!$organisation_contact instanceof ContentEntityInterface) {
      // Do not render the contact if the organisation does not have contact
      // details of its own.
      $item['content']['#access'] = FALSE;
      $cacheable_metadata->applyTo($item);
      continue;
    }
    $cacheable_metadata->addCacheableDependency($organisation_contact);
    $cacheable_metadata->applyTo($item);
  }
}
